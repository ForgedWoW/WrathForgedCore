{
  "ConnectionStrings": {
    "auth": "server=127.0.0.1; database=auth; user=trinity; password=trinity",
    "world": "server=127.0.0.1; database=world; user=trinity; password=trinity",
    "characters": "server=127.0.0.1; database=characters; user=trinity; password=trinity"
  },
  "ClientTCPServer": {
    "BindIP": "*",
    "Port": 3724,
    "Threads": 10
  },
  "Serilog": {
    "Using": [
      "Serilog.Sinks.Console",
      "Serilog.Sinks.File",
      "Serilog.Exceptions",
      "Serilog.Sinks.Async"
    ],
    "MinimumLevel": "Debug",
    "OtherLogLevels": {
      "Microsoft.EntityFrameworkCore.Database.Command": "Error"
    },
    "WriteTo": [
      {
        "Name": "Console"
      },
      {
        "Name": "Async",
        "batchSizeLimit": 100,
        "period": "00:00:02",
        "Args": {
          "configure": [
            {
              "Name": "File",
              "Args": {
                "rollingInterval": "Day",
                "path": "Logs/WrathForged.Realm.log..log",
                "formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact"
              }
            }
          ]
        }
      },
      {
        "Name": "Async",
        "batchSizeLimit": 100,
        "period": "00:00:02",
        "Args": {
          "configure": [
            {
              "Name": "SubLogger",
              "Args": {
                "configure": [
                  {
                    "Name": "File",
                    "Args": {
                      "rollingInterval": "Day",
                      "path": "Logs/WrathForged.Authorization.{SourceContext}..log",
                      "formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact"
                    }
                  }
                ],
                "filter": "Contains(Properties['SourceContext'], SourceContext)"
              }
            }
          ]
        }
      }
    ],
    "Enrich": [
      "FromLogContext",
      "WithMachineName",
      "WithThreadId",
      "WithExceptionDetails"
    ]
  },
  "Telemetry": {
    "NOTE": "Types is comma delimited. Tt can be `OpenTelemetryProtocol` or Zipkin or `Zipkin,OpenTelemetryProtocol` for both",
    "Types": "",
    "OpenTelemetryProtocol": {
      "Endpoint": "http://localhost:4317"
    },
    "Zipkin": {
      "Endpoint": "http://localhost:9411/api/v2/spans"
    }
  }
}